{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport VCDParser from 'vcd-parser';\nimport { Upload, message, Button, Typography } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nvar Title = Typography.Title;\n\nvar FileReader = function FileReader(vcdObjSetter) {\n  var uploadProps = {\n    name: 'file',\n    accept: \".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text'\n    },\n    onChange: function onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n        VCDParser.parse(info.file.originFileObj).then(function (parsedData) {\n          console.log(parsedData);\n        })[\"catch\"](function (err) {\n          console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n      }\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(Title, {\n    level: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"CSV upload\"), __jsx(Upload, _extends({}, uploadProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(UploadOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }), \" Click to Upload\")));\n};\n\n_c = FileReader;\nexport default FileReader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileReader\");","map":{"version":3,"sources":["/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx"],"names":["React","VCDParser","Upload","message","Button","Typography","UploadOutlined","Title","FileReader","vcdObjSetter","uploadProps","name","accept","action","headers","authorization","onChange","info","file","status","success","parse","originFileObj","then","parsedData","console","log","err","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,UAAlC,QAAoD,MAApD;AACA,SAASC,cAAT,QAA+B,mBAA/B;IAGQC,K,GAAUF,U,CAAVE,K;;AACR,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAkB;AACnC,MAAMC,WAAW,GAAG;AAClBC,IAAAA,IAAI,EAAE,MADY;AAElBC,IAAAA,MAAM,EAAC,MAFW;AAGlBC,IAAAA,MAAM,EAAE,kDAHU;AAIlBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE;AADR,KAJS;AAOlBC,IAAAA,QAPkB,oBAOTC,IAPS,EAOH;AACb,UAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,MAAzB,EAAiC;AAC/BhB,QAAAA,OAAO,CAACiB,OAAR,WAAmBH,IAAI,CAACC,IAAL,CAAUP,IAA7B;AACAV,QAAAA,SAAS,CAACoB,KAAV,CAAgBJ,IAAI,CAACC,IAAL,CAAUI,aAA1B,EACCC,IADD,CACM,UAAAC,UAAU,EAAI;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH,SAHD,WAIO,UAAAG,GAAG,EAAI;AACVF,UAAAA,OAAO,CAACG,KAAR,CAAcD,GAAd;AACH,SAND;AAOD,OATD,MASO,IAAIV,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,OAAzB,EAAkC;AACvChB,QAAAA,OAAO,CAACyB,KAAR,WAAiBX,IAAI,CAACC,IAAL,CAAUP,IAA3B;AACD;AACF;AApBiB,GAApB;AAuBA,SACE,4BACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,MAAC,MAAD,eAAYD,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,qBADF,CAFF,CADF;AAUD,CAlCD;;KAAMF,U;AAoCN,eAAeA,UAAf","sourcesContent":["import React from 'react'\nimport VCDParser from 'vcd-parser'\nimport { Upload, message, Button, Typography } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\nimport * as Papa from 'papaparse' \n\nconst { Title } = Typography\nconst FileReader = (vcdObjSetter) => {\n  const uploadProps = {\n    name: 'file',\n    accept:\".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text',\n    },\n    onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} file uploaded successfully`)\n        VCDParser.parse(info.file.originFileObj)\n        .then(parsedData => {\n            console.log(parsedData);\n        })\n        .catch(err => {\n            console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`)\n      }\n    },\n  }\n  \n  return (\n    <>\n      <Title level={2}>CSV upload</Title>\n      <Upload {...uploadProps}>\n        <Button>\n          <UploadOutlined /> Click to Upload\n        </Button>\n      </Upload>\n    </>\n  )\n}\n\nexport default FileReader\n\n\n"]},"metadata":{},"sourceType":"module"}