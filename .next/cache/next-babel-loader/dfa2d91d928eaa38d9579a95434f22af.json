{"ast":null,"code":"var _jsxFileName = \"/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport VCDParser from 'vcd-parser';\nimport { Upload, message, Button, Typography } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nconst {\n  Title\n} = Typography;\n\nconst FileReader = vcdObjSetter => {\n  const uploadProps = {\n    name: 'file',\n    accept: \".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text'\n    },\n\n    onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} file uploaded successfully`);\n        read.readAsBinaryString(file);\n\n        read.onloadend = function () {\n          console.log(read.result);\n        };\n\n        VCDParser.parse(string).then(parsedData => {\n          console.log(parsedData);\n          vcdObjSetter(parsedData);\n        }).catch(err => {\n          console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    }\n\n  };\n  return __jsx(React.Fragment, null, __jsx(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"CSV upload\"), __jsx(Upload, _extends({}, uploadProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }), \" Click to Upload\")));\n};\n\nexport default FileReader;","map":{"version":3,"sources":["/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx"],"names":["React","VCDParser","Upload","message","Button","Typography","UploadOutlined","Title","FileReader","vcdObjSetter","uploadProps","name","accept","action","headers","authorization","onChange","info","file","status","success","read","readAsBinaryString","onloadend","console","log","result","parse","string","then","parsedData","catch","err","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,UAAlC,QAAoD,MAApD;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAAYF,UAAlB;;AACA,MAAMG,UAAU,GAAIC,YAAD,IAAkB;AACjC,QAAMC,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAE,MADU;AAEhBC,IAAAA,MAAM,EAAE,MAFQ;AAGhBC,IAAAA,MAAM,EAAE,kDAHQ;AAIhBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAE;AADV,KAJO;;AAOhBC,IAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,UAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,MAAzB,EAAiC;AAC7BhB,QAAAA,OAAO,CAACiB,OAAR,CAAiB,GAAEH,IAAI,CAACC,IAAL,CAAUP,IAAK,6BAAlC;AACAU,QAAAA,IAAI,CAACC,kBAAL,CAAwBJ,IAAxB;;AAEAG,QAAAA,IAAI,CAACE,SAAL,GAAiB,YAAY;AACzBC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,MAAjB;AACH,SAFD;;AAGAzB,QAAAA,SAAS,CAAC0B,KAAV,CAAgBC,MAAhB,EACKC,IADL,CACUC,UAAU,IAAI;AAChBN,UAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AACArB,UAAAA,YAAY,CAACqB,UAAD,CAAZ;AACH,SAJL,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVR,UAAAA,OAAO,CAACS,KAAR,CAAcD,GAAd;AACH,SAPL;AAQH,OAfD,MAeO,IAAIf,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,OAAzB,EAAkC;AACrChB,QAAAA,OAAO,CAAC8B,KAAR,CAAe,GAAEhB,IAAI,CAACC,IAAL,CAAUP,IAAK,sBAAhC;AACH;AACJ;;AA1Be,GAApB;AA6BA,SACI,4BACI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI,MAAC,MAAD,eAAYD,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,qBADJ,CAFJ,CADJ;AAUH,CAxCD;;AA0CA,eAAeF,UAAf","sourcesContent":["import React from 'react'\nimport VCDParser from 'vcd-parser'\nimport { Upload, message, Button, Typography } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\nimport * as Papa from 'papaparse'\nimport { parse } from 'path'\n\nconst { Title } = Typography\nconst FileReader = (vcdObjSetter) => {\n    const uploadProps = {\n        name: 'file',\n        accept: \".vcd\",\n        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n        headers: {\n            authorization: 'authorization-text',\n        },\n        onChange(info) {\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`)\n                read.readAsBinaryString(file);\n\n                read.onloadend = function () {\n                    console.log(read.result);\n                }\n                VCDParser.parse(string)\n                    .then(parsedData => {\n                        console.log(parsedData)\n                        vcdObjSetter(parsedData)\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`)\n            }\n        },\n    }\n\n    return (\n        <>\n            <Title level={2}>CSV upload</Title>\n            <Upload {...uploadProps}>\n                <Button>\n                    <UploadOutlined /> Click to Upload\n        </Button>\n            </Upload>\n        </>\n    )\n}\n\nexport default FileReader\n\n\n"]},"metadata":{},"sourceType":"module"}