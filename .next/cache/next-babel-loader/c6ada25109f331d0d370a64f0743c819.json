{"ast":null,"code":"var _jsxFileName = \"/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport VCDParser from 'vcd-parser';\nimport { Upload, message, Button, Typography } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nconst {\n  Title\n} = Typography;\n\nconst FileReader = vcdObjSetter => {\n  const uploadProps = {\n    name: 'file',\n    accept: \".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text'\n    },\n\n    onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} file uploaded successfully`);\n        VCDParser.parse(info.file.originFileObj).then(parsedData => {\n          console.log(parsedData);\n        }).catch(err => {\n          console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    }\n\n  };\n  return __jsx(React.Fragment, null, __jsx(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"CSV upload\"), __jsx(Upload, _extends({}, uploadProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(UploadOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }), \" Click to Upload\")));\n};\n\nexport default FileReader;","map":{"version":3,"sources":["/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx"],"names":["React","VCDParser","Upload","message","Button","Typography","UploadOutlined","Title","FileReader","vcdObjSetter","uploadProps","name","accept","action","headers","authorization","onChange","info","file","status","success","parse","originFileObj","then","parsedData","console","log","catch","err","error"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,UAAlC,QAAoD,MAApD;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAGA,MAAM;AAAEC,EAAAA;AAAF,IAAYF,UAAlB;;AACA,MAAMG,UAAU,GAAIC,YAAD,IAAkB;AACnC,QAAMC,WAAW,GAAG;AAClBC,IAAAA,IAAI,EAAE,MADY;AAElBC,IAAAA,MAAM,EAAC,MAFW;AAGlBC,IAAAA,MAAM,EAAE,kDAHU;AAIlBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE;AADR,KAJS;;AAOlBC,IAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,UAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,MAAzB,EAAiC;AAC/BhB,QAAAA,OAAO,CAACiB,OAAR,CAAiB,GAAEH,IAAI,CAACC,IAAL,CAAUP,IAAK,6BAAlC;AACAV,QAAAA,SAAS,CAACoB,KAAV,CAAgBJ,IAAI,CAACC,IAAL,CAAUI,aAA1B,EACCC,IADD,CACMC,UAAU,IAAI;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH,SAHD,EAICG,KAJD,CAIOC,GAAG,IAAI;AACVH,UAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACH,SAND;AAOD,OATD,MASO,IAAIX,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,OAAzB,EAAkC;AACvChB,QAAAA,OAAO,CAAC0B,KAAR,CAAe,GAAEZ,IAAI,CAACC,IAAL,CAAUP,IAAK,sBAAhC;AACD;AACF;;AApBiB,GAApB;AAuBA,SACE,4BACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,MAAC,MAAD,eAAYD,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,qBADF,CAFF,CADF;AAUD,CAlCD;;AAoCA,eAAeF,UAAf","sourcesContent":["import React from 'react'\nimport VCDParser from 'vcd-parser'\nimport { Upload, message, Button, Typography } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\nimport * as Papa from 'papaparse' \n\nconst { Title } = Typography\nconst FileReader = (vcdObjSetter) => {\n  const uploadProps = {\n    name: 'file',\n    accept:\".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text',\n    },\n    onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} file uploaded successfully`)\n        VCDParser.parse(info.file.originFileObj)\n        .then(parsedData => {\n            console.log(parsedData);\n        })\n        .catch(err => {\n            console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`)\n      }\n    },\n  }\n  \n  return (\n    <>\n      <Title level={2}>CSV upload</Title>\n      <Upload {...uploadProps}>\n        <Button>\n          <UploadOutlined /> Click to Upload\n        </Button>\n      </Upload>\n    </>\n  )\n}\n\nexport default FileReader\n\n\n"]},"metadata":{},"sourceType":"module"}