{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport VCDParser from 'vcd-parser';\nimport { Upload, message, Button, Typography } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nvar reader = function reader(input) {\n  var read = new FileReader();\n  read.readAsBinaryString(input);\n\n  read.onloadend = function () {\n    console.log(read.result);\n  };\n};\n\nvar Title = Typography.Title;\n\nvar FileReader = function FileReader(vcdObjSetter) {\n  var uploadProps = {\n    name: 'file',\n    accept: \".vcd\",\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text'\n    },\n    onChange: function onChange(info) {\n      if (info.file.status === 'done') {\n        message.success(\"\".concat(info.file.name, \" file uploaded successfully\"));\n        var input = info.file.originFileObj;\n        var string = JSON.parse(JSON.stringify(input));\n        console.log(input);\n        console.log(string); // console.log(test)\n\n        VCDParser.parse(string).then(function (parsedData) {\n          console.log(parsedData);\n          vcdObjSetter(parsedData);\n        })[\"catch\"](function (err) {\n          console.error(err);\n        });\n      } else if (info.file.status === 'error') {\n        message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n      }\n    }\n  };\n  return __jsx(React.Fragment, null, __jsx(Title, {\n    level: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"CSV upload\"), __jsx(Upload, _extends({}, uploadProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, __jsx(UploadOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }), \" Click to Upload\")));\n};\n\n_c = FileReader;\nexport default FileReader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileReader\");","map":{"version":3,"sources":["/Users/thomasdhome/Documents/thomas/Princeton/Job/ELE206/VerilogTrafficLightViewer/pages/components/FileReader.tsx"],"names":["React","VCDParser","Upload","message","Button","Typography","UploadOutlined","reader","input","read","FileReader","readAsBinaryString","onloadend","console","log","result","Title","vcdObjSetter","uploadProps","name","accept","action","headers","authorization","onChange","info","file","status","success","originFileObj","string","JSON","parse","stringify","then","parsedData","err","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,UAAlC,QAAoD,MAApD;AACA,SAASC,cAAT,QAA+B,mBAA/B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACtB,MAAIC,IAAI,GAAG,IAAIC,UAAJ,EAAX;AAEAD,EAAAA,IAAI,CAACE,kBAAL,CAAwBH,KAAxB;;AAEAC,EAAAA,IAAI,CAACG,SAAL,GAAiB,YAAY;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,MAAjB;AACH,GAFD;AAGH,CARD;;IAUQC,K,GAAUX,U,CAAVW,K;;AACR,IAAMN,UAAU,GAAG,SAAbA,UAAa,CAACO,YAAD,EAAkB;AACjC,MAAMC,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAE,MADU;AAEhBC,IAAAA,MAAM,EAAE,MAFQ;AAGhBC,IAAAA,MAAM,EAAE,kDAHQ;AAIhBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,EAAE;AADV,KAJO;AAOhBC,IAAAA,QAPgB,oBAOPC,IAPO,EAOD;AACX,UAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,MAAzB,EAAiC;AAC7BxB,QAAAA,OAAO,CAACyB,OAAR,WAAmBH,IAAI,CAACC,IAAL,CAAUP,IAA7B;AACA,YAAMX,KAAK,GAAGiB,IAAI,CAACC,IAAL,CAAUG,aAAxB;AAGA,YAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezB,KAAf,CAAX,CAAf;AAEAK,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYgB,MAAZ,EAR6B,CAS7B;;AACA7B,QAAAA,SAAS,CAAC+B,KAAV,CAAgBF,MAAhB,EACKI,IADL,CACU,UAAAC,UAAU,EAAI;AAChBtB,UAAAA,OAAO,CAACC,GAAR,CAAYqB,UAAZ;AACAlB,UAAAA,YAAY,CAACkB,UAAD,CAAZ;AACH,SAJL,WAKW,UAAAC,GAAG,EAAI;AACVvB,UAAAA,OAAO,CAACwB,KAAR,CAAcD,GAAd;AACH,SAPL;AAQH,OAlBD,MAkBO,IAAIX,IAAI,CAACC,IAAL,CAAUC,MAAV,KAAqB,OAAzB,EAAkC;AACrCxB,QAAAA,OAAO,CAACkC,KAAR,WAAiBZ,IAAI,CAACC,IAAL,CAAUP,IAA3B;AACH;AACJ;AA7Be,GAApB;AAgCA,SACI,4BACI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI,MAAC,MAAD,eAAYD,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,qBADJ,CAFJ,CADJ;AAUH,CA3CD;;KAAMR,U;AA6CN,eAAeA,UAAf","sourcesContent":["import React from 'react'\nimport VCDParser from 'vcd-parser'\nimport { Upload, message, Button, Typography } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\n\nconst reader = (input) => {\n    var read = new FileReader();\n\n    read.readAsBinaryString(input);\n\n    read.onloadend = function () {\n        console.log(read.result);\n    }\n}\n\nconst { Title } = Typography\nconst FileReader = (vcdObjSetter) => {\n    const uploadProps = {\n        name: 'file',\n        accept: \".vcd\",\n        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n        headers: {\n            authorization: 'authorization-text',\n        },\n        onChange(info) {\n            if (info.file.status === 'done') {\n                message.success(`${info.file.name} file uploaded successfully`)\n                const input = info.file.originFileObj\n\n\n                const string = JSON.parse(JSON.stringify(input))\n\n                console.log(input)\n                console.log(string)\n                // console.log(test)\n                VCDParser.parse(string)\n                    .then(parsedData => {\n                        console.log(parsedData)\n                        vcdObjSetter(parsedData)\n                    })\n                    .catch(err => {\n                        console.error(err);\n                    });\n            } else if (info.file.status === 'error') {\n                message.error(`${info.file.name} file upload failed.`)\n            }\n        },\n    }\n\n    return (\n        <>\n            <Title level={2}>CSV upload</Title>\n            <Upload {...uploadProps}>\n                <Button>\n                    <UploadOutlined /> Click to Upload\n                </Button>\n            </Upload>\n        </>\n    )\n}\n\nexport default FileReader\n\n\n"]},"metadata":{},"sourceType":"module"}